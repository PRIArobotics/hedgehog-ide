swagger: '2.0'
info:
    title: Hedgehog Deployment API
    description: Program management and deployment API of the Hedgehog controller
    version: '1.0.0'
    contact:
        name: 'Markus Klein'
        url: 'http://pria.at'
        email: 'klein@pria.at'
produces:
    - application/vnd.api+json
consumes:
    - application/vnd.api+json
paths:
    /programs:
        get:
            summary: 'Get a list of all programs stored on the controller'
            responses:
                200:
                    description: 'Returns a list for programs'
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    $ref: '#/definitions/Program'
        post:
            summary: 'Create a new program'
            parameters:
            - name: program
              in: body
              required: true
              schema:
                  type: object
                  properties:
                      data:
                          $ref: '#/definitions/Program'
            responses:
                201:
                    description: 'Returns the newly created program'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Program'
    /programs/{program_id}:
        get:
            summary: 'Get a single program'
            parameters:
            - name: program_id
              in: path
              type: string
              required: true
            responses:
                200:
                    description: 'Returns the program'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Program'
        patch:
            summary: 'Partially update a program'
            parameters:
            - name: program_id
              in: path
              type: string
              required: true
            - name: program
              in: body
              required: true
              schema:
                  type: object
                  properties:
                      data:
                          $ref: '#/definitions/Program'
            responses:
                200:
                    description: 'Returns a representation of the updated program'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Program'

        delete:
            summary: 'Delete a program and all its related resources'
            parameters:
            - name: program_id
              in: path
              type: string
              required: true
            responses:
                200:
                    description: 'The resource has been deleted accordingly'

    /blobs/{program_id}/{blob_id}:
        get:
            parameters:
            - name: program_id
              in: path
              type: string
              required: true
            - name: blob_id
              in: path
              type: string
              required: true
            responses:
                200:
                    description: 'Returns the requested blob'
                    schema:
                        $ref: '#/definitions/Blob'

    /trees/{program_id}/{tree_id}:
        get:
            summary: 'Get a tree object of a program'
            parameters:
            - name: program_id
              in: path
              type: string
              required: true
            - name: tree_id
              in: path
              type: string
              required: true
            responses:
                200:
                    description: 'Returns a requested tree'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Tree'
                            included:
                                type: array
                                items:
                                    $ref: '#/definitions/TreeItem'


    /versions/{program_id}:
         get:
             summary: 'Get a list of versions of a program'
             parameters:
             - name: program_id
               in: path
               type: string
               required: true
             responses:
                 200:
                     description: 'Returns a list of versions'
                     schema:
                         type: object
                         properties:
                             data:
                                 type: array
                                 items:
                                     $ref: '#/definitions/Version'
         post:
             summary: 'Create a new version from the program in the working tree'
             parameters:
             - name: program_id
               in: path
               type: string
               required: true
             - name: version
               in: body
               schema:
                   type: object
                   properties:
                       data:
                           $ref: '#/definitions/Version'
             responses:
                 201:
                     description: 'Returns the newly created version'
                     schema:
                         type: object
                         properties:
                             data:
                                 $ref: '#/definitions/Version'

    /versions/{program_id}/{version_id}:
         get:
             summary: 'Get a single version'
             parameters:
              - name: program_id
                in: path
                type: string
                required: true
              - name: version_id
                in: path
                type: string
                required: true
             responses:
                 200:
                     description: 'Returns information about the requested version'
                     schema:
                         type: object
                         properties:
                             data:
                                 $ref: '#/definitions/Version'


    # /workingtrees:
    #     get:
    # /workingtrees/{program_id}:
    #     get:
    #     patch:
    # /workingtrees/{program_id}/directories:
    #     get:
    #     post:
    # /workingtrees/{program_id}/directories/{directory_id}:
    #     get:
    #     patch:
    #     delete:
    # /workingtrees/{program_id}/files:
    #     get:
    #     post:
    # /workingtrees/{program_id}/files/{file_id}:
    #     get:
    #     patch:
    #     delete:
    #
    /sensors:
        get:
            summary: 'Get a list of all sensors with its current values'
            responses:
                200:
                    description: 'Returns all sensors'
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    $ref: '#/definitions/Sensor'
    /sensors/{sensor_id}:
        get:
            summary: 'Get a single sensor'
            parameters:
             - name: sensor_id
               in: path
               type: string
               required: true
            responses:
                200:
                    description: 'Returns the requested sensor'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Sensor'
        patch:
            summary: Set a sensor's pullup
            parameters:
            - name: sensor_id
              in: path
              type: string
              required: true
            - name: sensor
              in: body
              required: true
              # TODO: specify which arguments are allowed
              schema:
                  type: object
                  properties:
                      data:
                          $ref: '#/definitions/Sensor'
            responses:
                200:
                    description: 'Returns the sensor with the updated pullup resistor'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Sensor'
    /servos:
        get:
            summary: 'Get a list of all servos'
            responses:
                200:
                    description: 'Returns all sensors'
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    $ref: '#/definitions/Servo'
    /servos/{servo_id}:
        get:
            summary: 'Get a single servo'
            parameters:
            - name: servo_id
              in: path
              type: string
              required: true
            responses:
                200:
                    description: 'Returns the requested servo'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Servo'
        patch:
            summary: 'Enable a servo or set its position'
            parameters:
            - name: servo_id
              in: path
              type: string
              required: true
            - name: servo
              in: body
              required: true
              # TODO: specify which arguments are allowed
              schema:
                  type: object
                  properties:
                      data:
                          $ref: '#/definitions/Servo'
            responses:
                200:
                    description: 'Returns the updated servo data'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Servo'

    /motors:
        get:
            summary: 'Get a list of all motors'
            responses:
                200:
                    description: 'Returns an array containing motor'
                    schema:
                        type: object
                        properties:
                            data:
                                type: array
                                items:
                                    $ref: '#/definitions/Motor'
    /motors/{motor_id}:
        get:
            summary: 'Get information about a single motor'
            parameters:
            - name: motor_id
              in: path
              type: string
              required: true
            responses:
                200:
                    description: 'Returns the requested motor'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Motor'
        patch:
            summary: 'Control a motor'
            parameters:
            - name: motor_id
              in: path
              type: string
              required: true
            - name: motor
              in: body
              required: true
              # TODO: specify which arguments are allowed
              schema:
                  type: object
                  properties:
                      data:
                          $ref: '#/definitions/Motor'
            responses:
                200:
                    description: 'Returns the updated motor data'
                    schema:
                        type: object
                        properties:
                            data:
                                $ref: '#/definitions/Motor'

    # /run:
    #     get:
    #     post:
    #     delete:
    # /run/stdout:
    #     get:
    # /run/stdin:
    #     get:
    #     patch:

definitions:
    Program:
        type: object
        required:
        - type
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - program
            attributes:
                type: object
                required:
                - name
                - creationDate
                properties:
                    name:
                        type: string
                    creationDate:
                        type: string
                        format: dateTime
            relationships:
                type: object
                properties:
                    versions:
                        $ref: '#/definitions/JsonApiManyLink'
                    workingtree:
                        $ref: '#/definitions/JsonApiOneLink'

    Blob:
        type: object
        required:
        - type
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - blob
            attributes:
                type: object
                properties:
                    content:
                        type: string
                    encoding:
                        type: string
                    mode:
                        type: string
                    size:
                        type: integer

    Tree:
        type: object
        required:
        - type
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - tree
            relationships:
                type: object
                properties:
                    items:
                        $ref: '#/definitions/JsonApiManyLink'
    TreeItem:
        type: object
        required:
        - type
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - tree-item
            attributes:
                type: object
                properties:
                    path:
                        type: string
            relationships:
                type: object
                properties:
                    child:
                        $ref: '#/definitions/JsonApiOneLink'

    Version:
        type: object
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - version
            attributes:
                type: object
                properties:
                    tag:
                        type: string
                    message:
                        type: string
            relationships:
                type: object
                properties:
                    tree:
                        $ref: '#/definitions/JsonApiOneLink'
                    program:
                        $ref: '#/definitions/JsonApiOneLink'
                    parents:
                        $ref: '#/definitions/JsonApiManyLink'

    Sensor:
        type: object
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - sensor
            attributes:
                type: object
                properties:
                    type:
                        type: string
                        enum:
                        - analog
                        - digital
                    value:
                        type: integer
                    pullup:
                        type: boolean

    Servo:
        type: object
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - servo
            attributes:
                type: object
                properties:
                    enabled:
                        type: boolean
                    position:
                        type: integer

    Motor:
        type: object
        properties:
            id:
                type: string
            type:
                type: string
                enum:
                - motor
            attributes:
                type: object
                properties:
                    power:
                        type: integer
                    velocity:
                        type: integer

    JsonApiOneLink:
        type: object
        properties:
            links:
                type: object
                properties:
                    self:
                        type: string
                        format: uri
                    related:
                        type: string
                        format: uri
                    data:
                        $ref: '#/definitions/JsonApiResourceIdentifier'
    JsonApiManyLink:
        type: object
        properties:
            links:
                type: object
                properties:
                    self:
                        type: string
                        format: uri
                    related:
                        type: string
                        format: uri
                    data:
                        type: array
                        items:
                            $ref: '#/definitions/JsonApiResourceIdentifier'
    JsonApiResourceIdentifier:
        type: object
        required:
        - id
        - type
        properties:
            id:
                type: string
            type:
                type: string

#definitions:
#    JsonApiWrapper:
#        type: object
#        properties:
#            data:
#                $ref: '#/definitions/JsonApiDataWrapper'
#            errors:
#                $ref: '#/definitions/Error'
#                description: 'an array of error objects'
#            meta:
#                type: object
#                description: 'a meta object that contains non-standard meta-information'
#    Error:
#        type: object
